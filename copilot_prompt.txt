# ==================================================
# Project: UAV-Based Gas Source Localisation System
# Author: Ronnie Fellows-Smith
# Final Year Engineering Thesis
# ==================================================

==================================================
= Project Overview
==================================================

This project implements an autonomous UAV-based system to localise the emission source of a gas (e.g. CO₂). A ground station provides wind data to the UAV via LoRa. The UAV uses this data, along with its own gas concentration and GPS reading received from the UAV GPS, to determine the likely source location. The Raspberry Pi on the UAV also sends updated waypoints to the DJI M350 RTK to autonomously guide the drone’s search.

LoRa communication is strictly **call-and-response**:
- Ground Station → sends wind data
- UAV → replies with GPS and CO₂ sensor data
- Ground Station sends data periodically every 10 seconds, and waits for response from the UAV between transmissions.

All LoRa modules (Heltec WiFi LoRa32 V3.2, SX1262) run identical “dumb” firmware: they simply pass serial data between Pi and RF.

==================================================
= Communication Architecture
==================================================

- Transport: LoRa over UART
- Encoding: CSV text (lightweight and human-readable)
- Topology: 1-to-1 communication, initiated by Ground Station
- Packets: Simple strings, comma-separated
- Retry logic: Handled by Ground Station only

==================================================
= UAV (Raspberry Pi 4B on DJI M350 RTK)
==================================================

## Summary:
Acts as the autonomous controller. Reads CO₂ sensor, receives wind data, uses GPS and wind vector to estimate gas source location, then sends new waypoints to the DJI drone via the DJI Payload SDK.

## Interfaces:
- **SprintIR-WF-20 CO₂ Sensor**
  - UART5 (TX = GPIO12, RX = GPIO13)
  - Reads ppm at up to 20 Hz
- **Heltec WiFi LoRa32 V3.2**
  - UART3 (TX = GPIO4, RX = GPIO5)
  - Used to receive wind data and send response
- **DJI M350 RTK (via Payload SDK)**
  - Provides UAV GPS
  - Receives waypoints from Pi

## Responsibilities:
- Receive LoRa packet from Ground Station
- Read CO₂ level from sensor
- Query GPS from DJI SDK
- Estimate new target position (source localisation logic)
- Send waypoint to DJI flight controller
- Log all input/output and send LoRa reply

==================================================
= Ground Station (Raspberry Pi 4B)
==================================================

## Summary:
Sends wind data to UAV every 10 seconds (or on retry), receives UAV telemetry, and logs results. On startup, sends static GPS location via an INIT packet.

## Interfaces:
- **Heltec WiFi LoRa32 V3.2**
  - UART3 (TX = GPIO4, RX = GPIO5)
  - Sends/receives CSV packets over LoRa

## Planned Interfaces (Future):
- Wind sensor, GPS, and compass
  - Will replace placeholder values

## Responsibilities:
- On startup:
  - Send `INIT` packet with static GPS location
- In loop:
  - Read/generate wind data
  - Send `WIND` packet
  - Wait for UAV reply (10s)
  - Retry on timeout
  - Log all transmissions and receptions

==================================================
= Transmission Format Examples (LoRa)
==================================================

# All transmissions are comma-separated CSV strings.
# Timestamps use float seconds since epoch (from time.time()).

### Ground Station → UAV

# INIT packet (startup only)
INIT,172345.00,-31.9510,115.8570

# WIND packet (sent every 10s)
WIND,172347.20,238.5,4.2
# Format: WIND,<timestamp>,<wind_direction_deg>,<wind_speed_mps>

### UAV → Ground Station (response)
UAV,172347.45,-31.9502,115.8563,42.1,412.8
# Format: UAV,<timestamp>,<lat>,<lon>,<alt_m>,<co2_ppm>

==================================================
= Structured Logging Format Examples
==================================================

# Format: newline-delimited JSON (.jsonl) or standard JSON log files

### Ground Station Log Entry
{
  "timestamp": "2025-07-12T14:23:47.201Z",
  "event": "TX_WIND",
  "packet": "WIND,172347.20,238.5,4.2",
  "retries": 0,
  "response_received": true,
  "response_packet": "UAV,172347.45,-31.9502,115.8563,42.1,412.8",
  "round_trip_ms": 250
}

### UAV Log Entry
{
  "timestamp": "2025-07-12T14:23:47.411Z",
  "event": "RECV_WIND",
  "packet": "WIND,172347.20,238.5,4.2",
  "wind_direction_deg": 238.5,
  "wind_speed_mps": 4.2,
  "co2_ppm": 412.8,
  "gps": {
    "lat": -31.9502,
    "lon": 115.8563,
    "alt_m": 42.1
  },
  "response_packet": "UAV,172347.45,-31.9502,115.8563,42.1,412.8",
  "response_sent": true
}

==================================================
= File/Folder Structure
==================================================

project_root/
│
├── copilot_prompt.txt
│
├── uav/
│   ├── main.py
│   ├── sensors/
│   │   └── sprintir_reader.py
│   ├── comms/
│   │   ├── lora_responder.py
│   ├── logic/
│   │   └── source_localiser.py
│   ├── logs/
│   │   └── logger.py
│   └── dji_sdk/
│       ├── flight_commander.py  # Sends waypoints
│       ├── position_reader.py   # Gets UAV GPS position
│
├── ground_station/
│   ├── main.py
│   ├── sensors/
│   │   └── wind_sensor_reader.py
│   ├── comms/
│   │   ├── lora_transmitter.py
│   ├── logic/
│   └── logs/
│       └── logger.py
│
├── heltec_firmware/
│   └── heltec_firmware.ino
│
└── docs/
    ├── architecture.txt
    └── packet_formats.txt

==================================================
= Copilot Coding Instructions
==================================================

- Use Python 3.x
- Use `pyserial` for UART communication
- Write CSV packet strings manually — no JSON over LoRa
- Each LoRa packet should end in `\n`
- All logic runs on Raspberry Pi (Heltec is dumb serial device)
- Handle timeouts, retries, logging with consistent formatting
- Use ISO 8601 for log timestamps
- Prefer small, testable modules with clear responsibilities
- UAV and Ground Station must parse each other’s packets robustly
- Use shared utility modules for logging and timestamping if possible